/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-custom:src/main/java/controller/Controller.e.vm.java
 */
package ru.ssau.lexus.web.domain;

import lombok.AllArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import ru.ssau.lexus.domain.dto.UserDto;
import ru.ssau.lexus.service.UserService;

import javax.validation.Valid;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.Optional;

@RestController
@AllArgsConstructor
public class UserController {

    protected final UserService userService;

    /**
     * {@code POST  /user} : Create a new user.
     *
     * @param userDto the userDto to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new userDto, or with status {@code 400 (Bad Request)} if the user has already an ID.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */

    @PostMapping("/user")
    public ResponseEntity<UserDto> createUser(@Valid @RequestBody UserDto userDto) throws Exception {
        if (userDto.getId() != null) {
            throw new Exception("A new user cannot already have an ID");
        }
        UserDto result = userService.save(userDto);
        return ResponseEntity.ok().body(result);
    }

    /**
     * {@code PUT  /user} : Updates an existing anodeHist.
     *
     * @param userDto the userDto to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated userDto,
     * or with status {@code 400 (Bad Request)} if the userDto is not valid,
     * or with status {@code 500 (Internal Server Error)} if the userDto couldn't be updated.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PutMapping("/user")
    public ResponseEntity<UserDto> updateUser(@Valid @RequestBody UserDto userDto) throws Exception {
        if (userDto.getId() == null) {
            throw new Exception("Invalid id");
        }
        UserDto result = userService.save(userDto);
        return ResponseEntity.ok().body(result);
    }

    /**
     * {@code GET  /user} : get all the users.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of users in body.
     */
    @GetMapping("/user")
    public ResponseEntity<Collection<UserDto>> getAllUsers() {
        return ResponseEntity.ok().body(userService.findAll());
    }

    /**
     * {@code GET  /user/:id} : get the "id" user.
     *
     * @param id the id of the userDTO to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the userDto, or with status {@code 404 (Not Found)}.
     */
    @GetMapping("/user/{id}")
    public ResponseEntity<UserDto> getUser(@PathVariable Integer id) {
        Optional<UserDto> userDto = userService.findOne(id);

        return userDto.map(dto -> ResponseEntity.ok().body(dto)).orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).body(null));

    }

    /**
     * {@code DELETE  /user/:id} : delete the "id" user.
     *
     * @param id the id of the userDto to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/user/{id}")
    public ResponseEntity<Void> deleteUser(@PathVariable Integer id) {
        userService.delete(id);

        return ResponseEntity.ok().build();
    }
}