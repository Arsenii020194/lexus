/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-custom:src/main/java/controller/Controller.e.vm.java
 */
package ru.ssau.lexus.web.domain;

import lombok.AllArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.net.URISyntaxException;
import ru.ssau.lexus.domain.dto.TrainingDto;
import ru.ssau.lexus.service.TrainingService;
import java.util.Collection;
import java.util.Optional;

@RestController
@AllArgsConstructor
public class TrainingController {

    protected final TrainingService trainingService;

    /**
     * {@code POST  /training} : Create a new training.
     *
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new trainingDto, or with status {@code 400 (Bad Request)} if the training has already an ID.
     */
    @PostMapping("/training/plan")
    public ResponseEntity<TrainingDto> createTraining(@Valid @RequestBody TrainingDto trainingDto) {
        TrainingDto result = trainingService.plan(trainingDto);
        return ResponseEntity.ok().body(result);
    }

    /**
     * {@code PUT  /training} : Updates an existing anodeHist.
     *
     * @param trainingDto the trainingDto to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated trainingDto,
     * or with status {@code 400 (Bad Request)} if the trainingDto is not valid,
     * or with status {@code 500 (Internal Server Error)} if the trainingDto couldn't be updated.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PutMapping("/training")
    public ResponseEntity<TrainingDto> updateTraining(@Valid @RequestBody TrainingDto trainingDto) throws Exception {
        if (trainingDto.getId() == null) {
            throw new Exception("Invalid id");
        }
        TrainingDto result = trainingService.save(trainingDto);
        return ResponseEntity.ok().body(result);
    }

    @PutMapping("/training/{id}/miss")
    public ResponseEntity<TrainingDto> missTraining(@PathVariable Integer id) {
        TrainingDto result = trainingService.miss(id);
        return ResponseEntity.status(result == null ? HttpStatus.NOT_FOUND : HttpStatus.OK).body(result);
    }

    @PutMapping("/training/{id}/approve")
    public ResponseEntity<TrainingDto> approveTraining(@PathVariable Integer id) {
        TrainingDto result = trainingService.approve(id);
        return ResponseEntity.status(result == null ? HttpStatus.NOT_FOUND : HttpStatus.OK).body(result);
    }

    @PutMapping("/training/{id}/complete")
    public ResponseEntity<TrainingDto> completeTraining(@PathVariable Integer id) {
        TrainingDto result = trainingService.complete(id);
        return ResponseEntity.status(result == null ? HttpStatus.NOT_FOUND : HttpStatus.OK).body(result);
    }

    /**
     * {@code GET  /training} : get all the trainings.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of trainings in body.
     */
    @GetMapping("/training")
    public ResponseEntity<Collection<TrainingDto>> getAllTrainings() {
        return ResponseEntity.ok().body(trainingService.findAll());
    }

    /**
     * {@code GET  /training/:id} : get the "id" training.
     *
     * @param id the id of the trainingDTO to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the trainingDto, or with status {@code 404 (Not Found)}.
     */
    @GetMapping("/training/{id}")
    public ResponseEntity<TrainingDto> getTraining(@PathVariable Integer id) {
        Optional<TrainingDto> trainingDto = trainingService.findOne(id);

        return trainingDto.map(dto -> ResponseEntity.ok().body(dto)).orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).body(null));

    }

    /**
     * {@code DELETE  /training/:id} : delete the "id" training.
     *
     * @param id the id of the trainingDto to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/training/{id}")
    public ResponseEntity<Void> deleteTraining(@PathVariable Integer id) {
        trainingService.delete(id);

        return ResponseEntity.ok().build();
    }
}