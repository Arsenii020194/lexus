/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-custom:src/main/java/controller/Controller.e.vm.java
 */
package ru.ssau.lexus.web.domain;

import lombok.AllArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import ru.ssau.lexus.domain.dto.TrainingStatusDto;
import ru.ssau.lexus.service.TrainingStatusService;

import javax.validation.Valid;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.Optional;

@RestController
@AllArgsConstructor
public class TrainingStatusController {

    protected final TrainingStatusService trainingStatusService;

    /**
     * {@code POST  /training-status} : Create a new trainingStatus.
     *
     * @param trainingStatusDto the trainingStatusDto to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new trainingStatusDto, or with status {@code 400 (Bad Request)} if the trainingStatus has already an ID.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */

    @PostMapping("/training-status")
    public ResponseEntity<TrainingStatusDto> createTrainingStatus(@Valid @RequestBody TrainingStatusDto trainingStatusDto) throws Exception {
        if (trainingStatusDto.getId() != null) {
            throw new Exception("A new trainingStatus cannot already have an ID");
        }
        TrainingStatusDto result = trainingStatusService.save(trainingStatusDto);
        return ResponseEntity.ok().body(result);
    }

    /**
     * {@code PUT  /training-status} : Updates an existing anodeHist.
     *
     * @param trainingStatusDto the trainingStatusDto to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated trainingStatusDto,
     * or with status {@code 400 (Bad Request)} if the trainingStatusDto is not valid,
     * or with status {@code 500 (Internal Server Error)} if the trainingStatusDto couldn't be updated.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PutMapping("/training-status")
    public ResponseEntity<TrainingStatusDto> updateTrainingStatus(@Valid @RequestBody TrainingStatusDto trainingStatusDto) throws Exception {
        if (trainingStatusDto.getId() == null) {
            throw new Exception("Invalid id");
        }
        TrainingStatusDto result = trainingStatusService.save(trainingStatusDto);
        return ResponseEntity.ok().body(result);
    }

    /**
     * {@code GET  /training-status} : get all the trainingStatuss.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of trainingStatuss in body.
     */
    @GetMapping("/training-status")
    public ResponseEntity<Collection<TrainingStatusDto>> getAllTrainingStatuss() {
        return ResponseEntity.ok().body(trainingStatusService.findAll());
    }

    /**
     * {@code GET  /training-status/:id} : get the "id" trainingStatus.
     *
     * @param id the id of the trainingStatusDTO to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the trainingStatusDto, or with status {@code 404 (Not Found)}.
     */
    @GetMapping("/training-status/{id}")
    public ResponseEntity<TrainingStatusDto> getTrainingStatus(@PathVariable Long id) {
        Optional<TrainingStatusDto> trainingStatusDto = trainingStatusService.findOne(id);

        return trainingStatusDto.map(dto -> ResponseEntity.ok().body(dto)).orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).body(null));

    }

    /**
     * {@code DELETE  /training-status/:id} : delete the "id" trainingStatus.
     *
     * @param id the id of the trainingStatusDto to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/training-status/{id}")
    public ResponseEntity<Void> deleteTrainingStatus(@PathVariable Long id) {
        trainingStatusService.delete(id);

        return ResponseEntity.ok().build();
    }
}