/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-custom:src/main/java/service/Service.e.vm.java
 */
package ru.ssau.lexus.service;

import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import ru.ssau.lexus.domain.dto.TrainingDto;
import ru.ssau.lexus.domain.entity.Training;
import ru.ssau.lexus.domain.mapper.TrainingMapper;
import ru.ssau.lexus.repository.crud.TrainingRepository;
import ru.ssau.lexus.repository.crud.TrainingStatusRepository;

import java.util.Collection;
import java.util.Optional;
import java.util.stream.Collectors;

import static ru.ssau.lexus.domain.dto.TrainingStatuses.*;

@Service
@Transactional
@AllArgsConstructor
public class TrainingService {

    protected final TrainingRepository repository;

    protected final TrainingMapper mapper;

    protected final TrainingStatusRepository trainingStatusRepository;

    /**
     * Save a Training.
     *
     * @param dto the entity to save.
     * @return the persisted entity.
     */
    public TrainingDto save(TrainingDto dto) {
        Training entity = mapper.dtoToEntity(dto);
        entity = repository.save(entity);
        return mapper.entityToDto(entity);
    }

    /**
     * Get all the Trainings.
     *
     * @return the list of entities.
     */
    @Transactional(readOnly = true)
    public Collection<TrainingDto> findAll() {
        return repository.findAll().stream().map(mapper::entityToDto).collect(Collectors.toList());
    }

    /**
     * Get one Training by id.
     *
     * @param id the id of the entity.
     * @return the entity.
     */
    @Transactional(readOnly = true)
    public Optional<TrainingDto> findOne(Integer id) {
        return repository.findById(id).map(mapper::entityToDto);
    }

    /**
     * Delete the anodeHist by id.
     *
     * @param id the id of the entity.
     */
    public void delete(Integer id) {
        repository.deleteById(id);
    }

    public TrainingDto miss(Integer id) {
        Optional<Training> trainingOptional = repository.findById(id);
        if (trainingOptional.isPresent()) {
            Training training = trainingOptional.get();
            trainingStatusRepository
                    .findByCode(MISSED.name())
                    .ifPresent(training::setIdStatus);
            return mapper.entityToDto(training);
        }
        return null;
    }

    public TrainingDto approve(Integer id) {
        Optional<Training> trainingOptional = repository.findById(id);
        if (trainingOptional.isPresent()) {
            Training training = trainingOptional.get();
            trainingStatusRepository
                    .findByCode(APPROVED.name())
                    .ifPresent(training::setIdStatus);
            return mapper.entityToDto(training);
        }
        return null;
    }

    public TrainingDto complete(Integer id) {
        Optional<Training> trainingOptional = repository.findById(id);
        if (trainingOptional.isPresent()) {
            Training training = trainingOptional.get();
            trainingStatusRepository
                    .findByCode(COMPLETED.name())
                    .ifPresent(training::setIdStatus);
            return mapper.entityToDto(training);
        }
        return null;
    }

    public TrainingDto plan(TrainingDto dto) {
        Training entity = mapper.dtoToEntity(dto);
        trainingStatusRepository
                .findByCode(APPROVED.name())
                .ifPresent(entity::setIdStatus);
        entity = repository.save(entity);
        return mapper.entityToDto(entity);
    }
}