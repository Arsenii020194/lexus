/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-custom:src/main/java/controller/Controller.e.vm.java
 */
package ru.ssau.lexus.web.domain;

import lombok.AllArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import ru.ssau.lexus.domain.dto.RoleDto;
import ru.ssau.lexus.service.RoleService;

import javax.validation.Valid;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.Optional;

@RestController
@AllArgsConstructor
public class RoleController {

    protected final RoleService roleService;

    /**
     * {@code POST  /role} : Create a new role.
     *
     * @param roleDto the roleDto to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new roleDto, or with status {@code 400 (Bad Request)} if the role has already an ID.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */

    @PostMapping("/role")
    public ResponseEntity<RoleDto> createRole(@Valid @RequestBody RoleDto roleDto) throws Exception {
        if (roleDto.getId() != null) {
            throw new Exception("A new role cannot already have an ID");
        }
        RoleDto result = roleService.save(roleDto);
        return ResponseEntity.ok().body(result);
    }

    /**
     * {@code PUT  /role} : Updates an existing anodeHist.
     *
     * @param roleDto the roleDto to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated roleDto,
     * or with status {@code 400 (Bad Request)} if the roleDto is not valid,
     * or with status {@code 500 (Internal Server Error)} if the roleDto couldn't be updated.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PutMapping("/role")
    public ResponseEntity<RoleDto> updateRole(@Valid @RequestBody RoleDto roleDto) throws Exception {
        if (roleDto.getId() == null) {
            throw new Exception("Invalid id");
        }
        RoleDto result = roleService.save(roleDto);
        return ResponseEntity.ok().body(result);
    }

    /**
     * {@code GET  /role} : get all the roles.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of roles in body.
     */
    @GetMapping("/role")
    public ResponseEntity<Collection<RoleDto>> getAllRoles() {
        return ResponseEntity.ok().body(roleService.findAll());
    }

    /**
     * {@code GET  /role/:id} : get the "id" role.
     *
     * @param id the id of the roleDTO to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the roleDto, or with status {@code 404 (Not Found)}.
     */
    @GetMapping("/role/{id}")
    public ResponseEntity<RoleDto> getRole(@PathVariable Long id) {
        Optional<RoleDto> roleDto = roleService.findOne(id);

        return roleDto.map(dto -> ResponseEntity.ok().body(dto)).orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).body(null));

    }

    /**
     * {@code DELETE  /role/:id} : delete the "id" role.
     *
     * @param id the id of the roleDto to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/role/{id}")
    public ResponseEntity<Void> deleteRole(@PathVariable Long id) {
        roleService.delete(id);

        return ResponseEntity.ok().build();
    }
}